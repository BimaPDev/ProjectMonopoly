// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workshop.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createWorkshopDocument = `-- name: CreateWorkshopDocument :one
INSERT INTO workshop_documents
(user_id, group_id, filename, mime, size_bytes, sha256, storage_url, status)
VALUES ($1,$2,$3,$4,$5,$6,$7,'queued')
RETURNING id
`

type CreateWorkshopDocumentParams struct {
	UserID     int32          `json:"user_id"`
	GroupID    int32          `json:"group_id"`
	Filename   string         `json:"filename"`
	Mime       string         `json:"mime"`
	SizeBytes  int64          `json:"size_bytes"`
	Sha256     string         `json:"sha256"`
	StorageUrl sql.NullString `json:"storage_url"`
}

func (q *Queries) CreateWorkshopDocument(ctx context.Context, arg CreateWorkshopDocumentParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createWorkshopDocument,
		arg.UserID,
		arg.GroupID,
		arg.Filename,
		arg.Mime,
		arg.SizeBytes,
		arg.Sha256,
		arg.StorageUrl,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const enqueueIngestJob = `-- name: EnqueueIngestJob :exec
INSERT INTO document_ingest_jobs(document_id) VALUES ($1)
`

func (q *Queries) EnqueueIngestJob(ctx context.Context, documentID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, enqueueIngestJob, documentID)
	return err
}
